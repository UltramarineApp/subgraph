// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewGame extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewGame entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NewGame must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewGame", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NewGame | null {
    return changetype<NewGame | null>(store.get("NewGame", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get num_(): BigInt {
    let value = this.get("num_");
    return value!.toBigInt();
  }

  set num_(value: BigInt) {
    this.set("num_", Value.fromBigInt(value));
  }

  get game_(): Bytes {
    let value = this.get("game_");
    return value!.toBytes();
  }

  set game_(value: Bytes) {
    this.set("game_", Value.fromBytes(value));
  }

  get name_(): string {
    let value = this.get("name_");
    return value!.toString();
  }

  set name_(value: string) {
    this.set("name_", Value.fromString(value));
  }

  get background1_(): string {
    let value = this.get("background1_");
    return value!.toString();
  }

  set background1_(value: string) {
    this.set("background1_", Value.fromString(value));
  }

  get emoji1_(): string {
    let value = this.get("emoji1_");
    return value!.toString();
  }

  set emoji1_(value: string) {
    this.set("emoji1_", Value.fromString(value));
  }

  get background2_(): string {
    let value = this.get("background2_");
    return value!.toString();
  }

  set background2_(value: string) {
    this.set("background2_", Value.fromString(value));
  }

  get emoji2_(): string {
    let value = this.get("emoji2_");
    return value!.toString();
  }

  set emoji2_(value: string) {
    this.set("emoji2_", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
